{"remainingRequest":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/src/components/HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/src/components/HelloWorld.vue","mtime":1601471211920},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}