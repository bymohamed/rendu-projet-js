{"remainingRequest":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/src/components/details.vue?vue&type=template&id=8d64e93c&","dependencies":[{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/src/components/details.vue","mtime":1604848572936},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/benyamna/Bureau/M1 miage/JS/TD1 JS/expenses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}